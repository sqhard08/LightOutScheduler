import logging
import re
import subprocess
from datetime import datetime, timedelta
from telethon import TelegramClient, events
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ Telegram
api_id = os.getenv('API_ID')
api_hash = os.getenv('API_HASH')
phone_number = os.getenv('PHONE_NUMBER')

# ID —á–∞—Ç–æ–≤
source_chat_id = os.getenv('SOURCE_CHAT_ID')
destination_chat_id = os.getenv('DESTINATION_CHAT_ID')

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
bot_token = os.getenv('BOT_TOKEN')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='/root/telegram_message_saver/message_saver.log'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telegram
client = TelegramClient('session_name', api_id, api_hash)

@client.on(events.NewMessage(chats=source_chat_id))
async def handler(event):
    message = event.raw_text

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–∞–π–ª
    with open('/root/telegram_message_saver/messages.txt', 'a') as f:
        f.write(f"{datetime.now()} - {message}\n")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ "–ß–µ—Ä–≥–∞ 4"
    if re.search(r'–ß–µ—Ä–≥–∞\s*4|4\s*—á–µ—Ä–≥–∞|–ß–µ—Ä–≥–∏\s*4', message, re.IGNORECASE):
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ curl
        try:
            curl_command = [
                'curl', '--socks5-basic',
                '-X', 'POST',
                f'https://api.telegram.org/bot{bot_token}/sendMessage',
                '-d', f'chat_id={destination_chat_id}',
                '-d', f'text={message}',
                '-d', 'disable_notification=false'
            ]
            subprocess.run(curl_command, check=True)
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ curl")
        except subprocess.CalledProcessError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ curl: {str(e)}")

        shutdown_time_str = None

        # –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        match1 = re.search(r'(\d{2}:\d{2})\s*‚Äì\s*\d{2}:\d{2}\s+–≤–∏–º–∏–∫–∞—Ç–∏–º–µ—Ç—å—Å—è\s+4\s+—á–µ—Ä–≥–∞', message, re.IGNORECASE)
        if match1:
            shutdown_time_str = match1.group(1)

        # –í—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if not shutdown_time_str:
            match2 = re.search(r'(–ß–µ—Ä–≥–∞\s*4|4\s*—á–µ—Ä–≥–∞|–ß–µ—Ä–≥–∏\s*4).*?(\d{2}:\d{2})', message, re.IGNORECASE)
            if match2:
                shutdown_time_str = match2.group(2)

        # –¢—Ä–µ—Ç—å—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if not shutdown_time_str:
            match3 = re.search(r'üü¢\s*(\d{2}:\d{2})\s*-\s*\d{2}:\d{2}\s*–≤–∏–º–∏–∫–∞—Ç–∏–º–µ—Ç—å—Å—è\s*4\s*—á–µ—Ä–≥–∞', message, re.IGNORECASE)
            if match3:
                shutdown_time_str = match3.group(1)

        if shutdown_time_str:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≤—Ä–µ–º—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ß–µ—Ä–≥–∞ 4: {shutdown_time_str}")
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ datetime –æ–±—ä–µ–∫—Ç –∏ –≤—ã—á–∏—Ç–∞–Ω–∏–µ 5 –º–∏–Ω—É—Ç
            shutdown_time = datetime.strptime(shutdown_time_str, '%H:%M')
            shutdown_time = shutdown_time - timedelta(minutes=5)
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è crontab: {shutdown_time.strftime('%H:%M')}")
            update_crontab(shutdown_time)

def update_crontab(shutdown_time):
    hour = shutdown_time.hour
    minute = shutdown_time.minute
    new_cron_job = f"{minute} {hour} * * * /root/telegram_message_saver/shutdown_script.sh\n"

    with open("/tmp/crontab.tmp", "w") as f:
        f.write(new_cron_job)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ crontab
    import os
    os.system("crontab /tmp/crontab.tmp")
    logger.info("Crontab –æ–±–Ω–æ–≤–ª–µ–Ω")

async def main():
    await client.start(phone_number)
    print("Client created")
    await client.run_until_disconnected()

if __name__ == '__main__':
    client.loop.run_until_complete(main())
